~ AWK ~

o AWK - это скриптовый язык построчного разбора и обработки входного потока по заданным
        шаблонам.
        
  С помощью AWK можно выполнять следующие действия:
- объявлять переменные для хранения данных;
- использовать арифметические и строковые операторы для работы с данными;
- использовать операторы и циклы, что позволяет реализовать сложные алгоритмы;
- создавать форматированные отчёты.

* Общий вид работы с AWK:
  awk [опции] [программа] [файл]
 
о В AWK используются следующие понятия:
1. Набор записей - это весь входной поток;
2. Запись - это одна строка, отделённая символом новой строки;
3. Поле - это составной элемент записи, отделённый от других подобных элементов 
          символом табуляции или пробелом.
  
  Некоторые опции AWK:
-F fs - позволяет указать символ-разделитель для полей в записи;
-f file - указывает файл с awk-скриптом;
-v var=value - позволяет объявить переменную и задать её значение;
-mf N - задаёт максимальное число полей для обработки;
-mr N - задаёт максимальный размер записи.


example 1: Чтение AWK-скриптов из командной строки:
$ awk '{print "Welcome to awk!"}'

o AWK имеет позиционные переменные, хранящие данные полей:
$0 - представляет собой всю строку (запись);
$1 - представляет собой первый элемент записи (первое поле);
$n - представляет собой n-ый элемент записи (n-ое поле).


example 2: Пример извлечения поля:
- Тестовые данные (содержимое файла data.txt):
Это первая строка
Это вторая строка
Это третья строка
$ awk '{print $2}' data.txt


example 3: Пример извлечения поля с использованием символа сепарации:
$ awk -F: '{print $1}' /etc/passwd


example 4: Использование нескольких команд:
echo "My name is Tom" | awk '{$4="Vladislav"; print $0}'


example 5: Чтение скрипта AWK из файла:
- Содержимое файла со скриптом AWK (user-home.awk):
$ awk -F: -f user-home.awk /etc/passwd


example 6: Чтение скрипта AWK из файла со множеством команд:
- Содержимое файла со скриптом AWK (user-home-ext.awk):
{
user = "Пользователь "
home = ", домашняя директория "
print user $1 home $6
}


example 7: Выполнение команд до начала обработки данных:
- Исходные данные взяты из data.txt (example 2):
$ awk 'BEGIN {print "Это исходные данные:"} {print $0}' data.txt
result 7:
Это исходные данные:
Это первая строка
Это вторая строка
Это третья строка


example 8: Выполнение команд после окончания обработки данных:
- Исходные данные взяты из data.txt (example 2):
$ awk 'BEGIN {print "Это исходные данные:"} {print $0} END {print "Конец исходных данных."}' data.txt


example 9: Пример масштабного AWK скрипта:
- Содержимое скрипта (begin-end.awk):
begin-end.awk:
BEGIN {
	print "Пользователи и домашние директории"
	print "-----------------------------------"
	print "Пользователь \t Домашняя директория"
	print "------------ \t -------------------"
	FS = ":"
}
{
	# Пробел между аргументами print означает конкатенацию
	print $1 " \t " $6
}
END {
	print "-----------------------------------"
}

- Запуск AWK-скрипта:
$ awk -f begin-end.awk /etc/passwd


example 10: Использование оператора if в AWK:
- Исходные данные взяты из numbers.txt:
10
20
30
40
50
$ awk '{if ($1 > 20) {x = $1 * 2; print x}}' numbers.txt


example 11: Использование операторов if-else в AWK:
- Исходные данные взяты из numbers.txt (example 10):
$ awk -f if_else.awk numbers.txt


example 12: Использование оператора while в AWK:
- Исходные данные взяты из matrix.txt:
11 22 33
44 55 66
77 88 99
while_awk.awk:
{
	total = 0
	current = 1
	while (current < 4) {
		total = total + $current
		current++
	}
	avg = total / 3
	print "Данные: " $0 ", среднее арифметическое " avg
}
$ awk -f while_awk.awk matrix.txt
result 12:
Данные: 11 22 33, среднее арифметическое 22
Данные: 44 55 66, среднее арифметическое 55
Данные: 77 88 99, среднее арифметическое 88


example 13: Использование встроенных переменных (FIELDWIDTHS):
- Исходные данные взяты из (phone_number.txt)
phone_number.txt:
234567890
987654321
736194258
$ awk 'BEGIN {FIELDWIDTHS="3 2 4"} {print $1,$2,$3}' data.txt
* Для работы данного примера нужен GNU/AWK


example 14: Использование оператора for в AWK:
- Исходные данные взяты из matrix.txt (example 12)
for_awk.awk
{
	total = 0
	for (i = 1; i < 4; i++) {
		total = total + $i
	}
	avg = total / 3;
	print "Данные: " $0 ", среднее арифметическое " avg
 }



